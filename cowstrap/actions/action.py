
class Action(object):
    """
    Represents a state transition that can be applied to a machine.

    :ivar generated_fields: contains all fields that will be generated by this
    stage.
    :type generated_fields: set(strings)
    :ivar _value_cache: map from variable name -> previously used value or None
    :type _value_cache: map(string, string)
    """

    def __init__(self, generated_fields):
        self.generated_fields = generated_fields
        self._value_cache = {}

    def register(self, parser):
        """
        Set up the subparser for command line arguments

        :param parser: the subparser to configure
        :type  parser: argparse.ArgumentParser
        """
        raise NotImplementedError()

    def configure(self, config, arguments, previous_fields):
        """
        Determine if enough information is (or will be) present to complete the
        action. If not, prompt the user for more information and return it.

        :param config: Contains all data loaded from the disk or already input
        by the user.
        :type  config: cowstrap.config.Config
        :param arguments: the run parameters determined by earlier Actions and
        specified on the command line
        :type  arguments: argparse.Namespace
        :param previous_fields: contains all fields that will be generated by
        the preceeding stages.
        :type  previous_fields: set(string)
        """
        raise NotImplementedError()

    # pylint: disable=R0201
    def prompt_user(self, var_name, default_value=None):
        """
        :param var_name: the name of the variable to request from the user
        :type  var_name: string
        :param default_value: use this if there is no cached previous value
        :type  default_value: string
        :returns: the value input by the user
        :rtype:   string
        """
        prev_value = default_value
        if var_name in self._value_cache:
            prev_value = self._value_cache[var_name]
        print("No value found for {}. Please set a value [{}]: "
            .format(var_name, prev_value))
        return raw_input()

    def perform(self):
        """
        Execute the action.
        """
        raise NotImplementedError()

